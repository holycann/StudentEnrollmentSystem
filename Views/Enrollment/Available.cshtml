@model List<StudentEnrollmentSystem.Models.ViewModels.CourseEnrollmentViewModel>

@{
    ViewData["Title"] = "Available Courses";
}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="sm:flex sm:items-center">
        <div class="sm:flex-auto">
            <h1 class="text-3xl font-semibold text-gray-900">Available Courses</h1>
            <p class="mt-2 text-sm text-gray-700">
                Browse and enroll in available courses. Make sure to check prerequisites and schedule conflicts.
            </p>
        </div>
    </div>

    <!-- Course List -->
    <div class="mt-8 grid grid-cols-1 gap-6 lg:grid-cols-2">
        @foreach (var course in Model)
        {
            <div class="bg-white overflow-hidden shadow rounded-lg">
                <div class="px-4 py-5 sm:p-6">
                    <div class="flex justify-between items-start">
                        <div>
                            <h3 class="text-lg font-medium leading-6 text-gray-900">
                                @course.CourseCode - @course.CourseName
                            </h3>
                            <p class="mt-1 text-sm text-gray-500">
                                @course.Description
                            </p>
                        </div>
                        <div class="text-right">
                            <p class="text-sm font-medium text-gray-900">Credits: @course.Credits</p>
                            <p class="text-sm text-gray-500">Available Seats: @course.AvailableSeats</p>
                            <p class="mt-1 text-lg font-semibold text-primary-600">@course.Fee.ToString("C")</p>
                        </div>
                    </div>

                    @if (course.PrerequisitesCodes.Any())
                    {
                        <div class="mt-4">
                            <h4 class="text-sm font-medium text-gray-900">Prerequisites:</h4>
                            <div class="mt-1 flex flex-wrap gap-2">
                                @foreach (var prereq in course.PrerequisitesCodes)
                                {
                                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                                        @prereq
                                    </span>
                                }
                            </div>
                        </div>
                    }

                    @if (course.IsEnrolled)
                    {
                        <div class="mt-4">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                                Already Enrolled
                            </span>
                        </div>
                    }
                    else if (!course.CanEnroll)
                    {
                        <div class="mt-4">
                            @if (course.MissingPrerequisites.Any())
                            {
                                <div class="rounded-md bg-yellow-50 p-4">
                                    <div class="flex">
                                        <div class="flex-shrink-0">
                                            <svg class="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                                            </svg>
                                        </div>
                                        <div class="ml-3">
                                            <h3 class="text-sm font-medium text-yellow-800">Missing Prerequisites</h3>
                                            <div class="mt-2 text-sm text-yellow-700">
                                                <p>Complete these courses first:</p>
                                                <ul class="list-disc pl-5 space-y-1">
                                                    @foreach (var missing in course.MissingPrerequisites)
                                                    {
                                                        <li>@missing</li>
                                                    }
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            else if (course.AvailableSeats == 0)
                            {
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-800">
                                    No Available Seats
                                </span>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="mt-4">
                            <button onclick="enrollInCourse(@course.CourseId)" 
                                    class="btn-primary w-full sm:w-auto"
                                    data-course-id="@course.CourseId">
                                Enroll Now
                            </button>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        async function enrollInCourse(courseId) {
            try {
                // Check prerequisites first
                const prereqResponse = await fetch(`/Enrollment/CheckPrerequisites/${courseId}`);
                const prereqData = await prereqResponse.json();
                
                if (!prereqData.canEnroll) {
                    alert('Cannot enroll: Missing prerequisites');
                    return;
                }

                // Check schedule conflicts
                const scheduleResponse = await fetch(`/Enrollment/CheckScheduleConflict/${courseId}`);
                const scheduleData = await scheduleResponse.json();
                
                if (scheduleData.hasConflict) {
                    alert('Cannot enroll: Schedule conflict detected');
                    return;
                }

                // Proceed with enrollment
                const response = await fetch('/Enrollment/Enroll', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        courseId: courseId,
                        studentId: null, // Will be set by server
                        notes: ''
                    })
                });

                const data = await response.json();
                
                if (data.success) {
                    alert('Enrollment successful!');
                    window.location.href = '/Enrollment/History';
                } else {
                    alert(data.message || 'Failed to enroll in course');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while processing your request');
            }
        }
    </script>
}
